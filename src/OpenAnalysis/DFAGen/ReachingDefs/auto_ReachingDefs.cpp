/* ReachingDefs.cpp
   NOTE: This file was automatically generated by DFAGen.  It is the
         implementation of the class for ReachingDefs analysis results.
*/


#include "auto_ReachingDefs.hpp"

namespace OA {
  namespace ReachingDefs {


OA_ptr<DataFlow::DataFlowSetImplIterator<StmtHandle > > ReachingDefs::getReachingDefsIterator(StmtHandle s) const {
    OA_ptr<DataFlow::DataFlowSetImplIterator<StmtHandle > > retval;

    if(mReachingDefs.find(s) == mReachingDefs.end()) {
        retval = new DataFlow::DataFlowSetImplIterator<StmtHandle > ();
    } else {
        retval = new DataFlow::DataFlowSetImplIterator<StmtHandle > (
            mReachingDefs.find(s)->second);
    }

    return retval;
}


OA_ptr<DataFlow::DataFlowSetImplIterator<StmtHandle > > ReachingDefs::getExitReachingDefsIterator() const {
    OA_ptr<DataFlow::DataFlowSetImplIterator<StmtHandle > > retval;

    retval = new DataFlow::DataFlowSetImplIterator<StmtHandle > (mExitReachingDefs);
    return retval;
}


void ReachingDefs::output(IRHandlesIRInterface& ir) const {
    sOutBuild->objStart("ReachingDefs");

    sOutBuild->mapStart("mReachingDefs", "StmtHandle", "OA_ptr<ReachingDefsDFSet>");

    std::map<StmtHandle,OA_ptr<ReachingDefsDFSet> >::const_iterator mapIter;
    for (mapIter = mReachingDefs.begin(); mapIter != mReachingDefs.end(); mapIter++) {
        StmtHandle s = mapIter->first;
        OA_ptr<ReachingDefsDFSet> rdset = mapIter->second;
        if ( rdset.ptrEqual(0) ) continue;

        sOutBuild->mapEntryStart();
        sOutBuild->mapKeyStart();
        sOutBuild->outputIRHandle(s, ir);
        sOutBuild->mapKeyEnd();
        sOutBuild->mapValueStart();


        sOutBuild->listStart();
        OA_ptr<DataFlow::DataFlowSetImplIterator<StmtHandle > > setIter;
        setIter = getReachingDefsIterator(s);
        for ( ; setIter->isValid(); (*setIter)++ ) {
             sOutBuild->listItemStart();
             setIter->current().output(ir);
             sOutBuild->listItemEnd();
        }
        sOutBuild->listEnd();
        sOutBuild->mapValueEnd();
        sOutBuild->mapEntryEnd();
    }
    sOutBuild->mapEnd("mReachingDefs");
    sOutBuild->objEnd("ReachingDefs");
}


void ReachingDefs::dump(
    std::ostream& os,
    OA_ptr<IRHandlesIRInterface> ir,
    Alias::Interface& aliasResults) const
{
    os << "ReachingDefs Analysis results." << endl;
    std::map<StmtHandle, OA_ptr<ReachingDefsDFSet> >::const_iterator mapIter;

    for (mapIter = mReachingDefs.begin(); mapIter != mReachingDefs.end(); mapIter++) {
        os << "\tstmt = " << ir->toString(mapIter->first) << std::endl;
        OA_ptr<DataFlow::DataFlowSetImplIterator<StmtHandle > > iter;
        iter = getReachingDefsIterator(mapIter->first);

        for ( ; iter->isValid(); (*iter)++) {
            os << "\t\t";
        cout << mIR->toString(iter->current());
            os << std::endl;
        }
    }
}


  } // end of ReachingDefs namespace
} // end of OA namespace
